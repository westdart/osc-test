---
- hosts: localhost
  become: no

  vars_files:
    - "{{ app_instances_file }}"

  vars:
    app_target_instances: "{{ app_instances }}"
    generated_secrets_config_path: "{{ generated_config_dir }}"
    amq_vault_file_name: "{{ amq_secrets_file | default(generated_config_dir + '/mjdi.vault') }}"
    local_key_path: "{{ lookup('env','HOME') }}/keys/local"

  tasks:
    - name: Ensure vault dir exsits
      file:
        path: "{{ generated_secrets_config_path }}"
        state: directory
        mode: 0700

    - name: check if secret vault exists
      stat:
        path: "{{ amq_vault_file_name }}"
      register: amq_vault

    - set_fact:
        amq_tmp_secret_file: "{{ generated_secrets_config_path }}/{{ 1000 | random(seed=inventory_hostname) | to_uuid }}.yml"

    - name: Create the yml secrets
      template:
        src: ../templates/secrets.yml.j2
        dest: "{{ amq_tmp_secret_file }}"
      changed_when: false
      when: not amq_vault.stat.exists | bool

    - name: Create tmp secret
      copy:
        dest: "{{ generated_secrets_config_path }}/.secret"
        content: "{{ amq_vault_passphrase | default('password') }}"
        mode: 0600
      when: not amq_vault.stat.exists | bool

    - name: Create the vault
      shell: "ansible-vault encrypt {{ amq_tmp_secret_file }} \
                --vault-password-file={{ generated_secrets_config_path }}/.secret \
                --output={{ amq_vault_file_name }}"
      when: not amq_vault.stat.exists | bool

    - name: Remove secret
      file:
        path: "{{ generated_secrets_config_path }}/.secret"
        state: absent
      changed_when: false

    - name: Remove amq secrets
      file:
        path: "{{ amq_tmp_secret_file }}"
        state: absent
      changed_when: false

    - name: Remove TLS keys
      file:
        path: "{{ local_key_path }}/{{ app_instance.name }}.key"
        state: absent
      with_items:
        - "{{ app_target_instances }}"
      loop_control:
        loop_var: app_instance
      changed_when: false
